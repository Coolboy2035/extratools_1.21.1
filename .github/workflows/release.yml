name: Create Release Build

on:
  release:
    types: [published]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要这个权限来上传到Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Extract mod information
      id: mod-info
      run: |
        echo "=== 读取 gradle.properties ==="
        
        # 读取 mod_id 和版本信息
        if [ -f "gradle.properties" ]; then
          MOD_ID=$(grep -E "^(mod_id|id|modname)=" gradle.properties | head -1 | cut -d'=' -f2- | tr -d '\r' | xargs)
          MOD_VERSION=$(grep -E "^(mod_version|version)=" gradle.properties | head -1 | cut -d'=' -f2- | tr -d '\r' | xargs)
        fi
        
        # 设置默认值
        if [ -z "$MOD_ID" ]; then
          MOD_ID="unknown-mod"
        fi
        if [ -z "$MOD_VERSION" ]; then
          MOD_VERSION="unknown"
        fi
        
        # 清理字符串
        MOD_ID=$(echo "$MOD_ID" | sed 's/^"//;s/"$//;s/^'\''//;s/'\''$//')
        MOD_VERSION=$(echo "$MOD_VERSION" | sed 's/^"//;s/"$//;s/^'\''//;s/'\''$//')
        
        echo "MOD_ID=$MOD_ID" >> $GITHUB_OUTPUT
        echo "MOD_VERSION=$MOD_VERSION" >> $GITHUB_OUTPUT
        echo "ARTIFACT_NAME=$MOD_ID-$MOD_VERSION" >> $GITHUB_OUTPUT
        echo "RELEASE_TITLE=$MOD_ID v$MOD_VERSION" >> $GITHUB_OUTPUT

    - name: Build with Gradle
      run: ./gradlew build

    - name: Prepare release assets
      run: |
        # 找到主要的JAR文件
        MAIN_JAR=$(find build/libs -name "*.jar" ! -name "*-sources.jar" ! -name "*-javadoc.jar" | head -1)
        
        if [ -n "$MAIN_JAR" ]; then
          # 复制并重命名主文件
          cp "$MAIN_JAR" "${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar"
          echo "主文件: ${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar"
          
          # 可选：也复制源码和文档包
          find build/libs -name "*-sources.jar" -exec cp {} . \;
          find build/libs -name "*-javadoc.jar" -exec cp {} . \;
        else
          echo "错误：未找到JAR文件"
          exit 1
        fi
        
        # 列出所有要上传的文件
        echo "将要上传的文件："
        ls -la *.jar

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar
          *.jar
        name: ${{ steps.mod-info.outputs.RELEASE_TITLE }}
        body: |
          # ${{ steps.mod-info.outputs.RELEASE_TITLE }}
          
          🚀 自动构建的模组发布
          
          ## 版本信息
          - **模组ID**: ${{ steps.mod-info.outputs.MOD_ID }}
          - **版本号**: ${{ steps.mod-info.outputs.MOD_VERSION }}
          - **构建时间**: $(date +"%Y-%m-%d %H:%M:%S")
          - **GitHub Actions运行ID**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## 下载文件
          - `${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar` - 主模组文件
          
          ## 校验和
          ```bash
          # SHA256 校验和
          sha256sum ${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar
          ```
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true

    - name: Upload additional artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ steps.mod-info.outputs.ARTIFACT_NAME }}
        path: |
          ${{ steps.mod-info.outputs.ARTIFACT_NAME }}.jar
          build/libs/*.jar
        retention-days: 30
